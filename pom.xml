<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.melahn</groupId>
  <artifactId>java-trace-visualizer</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>
  <name>${project.groupId}:${project.artifactId}</name>
  <description>A tool that makes jdb trace output easier to understand</description>
  <url>https://github.com/melahn/java-trace-visualizer</url>
  <licenses>
    <license>
      <name>MIT</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>
  <scm>
    <connection>scm:git:git://github.com/melahn/java-trace-visualizer.git</connection>
    <developerConnection>scm:git:ssh://github.com:melahn/java-trace-visualizer.git</developerConnection>
    <url>https://github.com/melahn/java-trace-visualizer/tree/main</url>
  </scm>
  <developers>
    <developer>
      <name>Gregory Melahn</name>
      <email>gregorymelahn@gmail.com</email>
      <organization>melahn.com</organization>
      <organizationUrl>http://melahn.com</organizationUrl>
    </developer>
  </developers>
  <properties>
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.projectKey>melahn_java-trace-visualizer</sonar.projectKey>
    <sonar.organization>melahn</sonar.organization>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.log.level>INFO</sonar.log.level>
    <sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
  </properties>
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
  <profiles>
    <!-- 
        This profile is used when building outside of 
        GitHub actions, such as on the command line, using Java 9
        or later.  The specification of <maven.compiler.release> 
        assures that the compiler does not include any api calls that 
        require java 9 or later (so it will run on Java 8).

        It sets builder.id, useful in a manifest.

        Deployment should only be done using GitHub 
        CI/CD so no distributionManagement section
        is defined.
    -->
    <profile>
      <id>local-java9+</id>
      <properties>
        <builder.id>${user.name}</builder.id>
        <maven.compiler.release>8</maven.compiler.release>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
        <jdk>[9,)</jdk>
      </activation>
    </profile>
        <!-- 
        This profile is used when building outside of 
        GitHub actions, such as on the command line, using Java 8
        The specification of <maven.compiler.source> and
        <maven.compiler.target> assures that the compiler does not 
        include any api calls that require java 9 or later 
        (so it will run on Java 8). 

        It sets builder.id, useful in a manifest.

        Deployment should only be done using GitHub 
        CI/CD so no distributionManagement section
        is defined.
    -->
    <profile>
      <id>local-java8</id>
      <properties>
        <builder.id>${user.name}</builder.id>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
        <jdk>1.8</jdk>
      </activation>
    </profile>
    <!-- 
        This profile is used with a GitHub Action.

        It sets builder.id, useful in a MANIFEST.

        It also sets up the repository to be
        used for a deploy to GitHub Packages.
    -->
    <profile>
      <id>github</id>
      <properties>
        <builder.id>${env.GITHUB_ACTOR}</builder.id>
        <maven.compiler.release>8</maven.compiler.release>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <distributionManagement>
        <repository>
          <id>github</id>
          <name>GitHub melahn Apache Maven Packages</name>
          <url>https://maven.pkg.github.com/melahn/java-trace-visualizer</url>
        </repository>
      </distributionManagement>
    </profile>
    <!-- 
        This profile is used with a GitHub Action.

        It sets builder.id, useful in a MANIFEST.

        It also sets up the repository to be
        used for a deploy to the Maven Central
        Repository.
    -->
    <profile>
      <id>ossrh</id>
      <properties>
        <builder.id>${env.GITHUB_ACTOR}</builder.id>
        <maven.compiler.release>8</maven.compiler.release>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <distributionManagement>
        <repository>
          <id>ossrh</id>
          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
      </distributionManagement>
    </profile>
  </profiles>
  <build>
    <resources>
      <resource>
        <!--
            This is used to extract the project version to derive the name of the shaded jar for integration-tests
        -->
        <directory>src/main/resources/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.3.1</version>
        <configuration>
          <source>8</source>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals>
              <goal>sign</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 
          Including the maven-jar-plugin explictly (even though I am also usimg
          the apache-shade-plugin) is to prevent the deplicating class issue when
          not building clean. See https://issues.apache.org/jira/browse/MSHADE-126
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.2</version>
        <configuration>
          <forceCreation>true</forceCreation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>no-duplicate-declared-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <banDuplicatePomDependencyVersions />
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M5</version>
        <configuration>
          <skip>true</skip>
          <trimStackTrace>false</trimStackTrace>
        </configuration>
        <executions>
          <execution>
            <id>unit-tests</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
            <configuration>
              <skip>false</skip>
              <includes>
                <include>**/*Test.java</include>
              </includes>
              <excludes>
                <exclude>**/*IntegrationTest.java</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <id>integration-tests</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
            <configuration>
              <skip>false</skip>
              <includes>
                <include>**/*IntegrationTest.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.0.0-M5</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.4</version>
        <configuration>
          <minimizeJar>true</minimizeJar>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <!--
                  filter out unneeded class and META-INF globally
              -->
              <filter>
                <artifact>*:*</artifact>
                <excludes>
                  <exclude>module-info.class</exclude>
                  <exclude>META-INF/*.SF</exclude>
                  <exclude>META-INF/*.DSA</exclude>
                  <exclude>META-INF/*.RSA</exclude>
                </excludes>
              </filter>
              <filters>
                <!--
                    filter out the resources.properties because it is 
                    only needed to conpute the name of the shaded jar
                    for running tests
                -->
                <filter>
                  <artifact>com.melahn:java-trace-visualizer</artifact>
                  <excludes>
                    <exclude>**/resources.properties</exclude>
                  </excludes>
                </filter>
                <!--
                    explictly include all the log4j elements to
                    avoid the 'ERROR StatusLogger Unrecognized format specifier'
                    error which occurs because the minimize jar option cannot
                    understand all the elements needed when computing the transitive 
                    hull in particular, non-classfile elements
                -->
                <filter>
                  <artifact>org.apache.logging.log4j:log4j-core</artifact>
                  <excludes>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                  </excludes>
                  <includes>
                    <include>**</include>
                  </includes>
                </filter>
                <!--
                    filter out any duplicate manifests
                -->
                <filter>
                  <artifact>org.apache.*:*</artifact>
                  <excludes>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                  </excludes>
                </filter>
                <filter>
                  <artifact>commons-cli:*:*:*</artifact>
                  <excludes>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                  </excludes>
                </filter>
                <filter>
                  <artifact>net.sourceforge.plantuml:*:*:*</artifact>
                  <excludes>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>com.melahn.util.java.trace.TraceVisualizer</Main-Class>
                    <Multi-Release>true</Multi-Release>
                    <Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>
                    <Builder-Id>${builder.id}</Builder-Id>
                    <url>${project.url}</url>
                  </manifestEntries>
                </transformer>
                <!--
                    Aggregate license files
                -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer" />
                <!--
                    Aggregate Notice files
                -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                  <addHeader>false</addHeader>
                </transformer>
                <!--
                    Aggregate META-INF/DEPENDENCIES
                -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/DEPENDENCIES</resource>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <!-- 
              Target java 1.8 source and target. Note that this only assures
              the *format* of the source and class files are java 8. To also
              be sure thst the class file does not use API's from java 9 or  
              later, the build profile 'java-8' defined above is used.
          -->
          <source>8</source>
          <target>8</target>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>
          <optimize>true</optimize>
          <compilerArgument>-Xlint:unchecked</compilerArgument>
        </configuration>
      </plugin>
      <!-- 
          Show which profile is in use to confirm the right one is being 
          activated
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <?m2e execute onConfiguration?>
            <id>show-profiles</id>
            <phase>verify</phase>
            <goals>
              <goal>active-profiles</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 
          Generate Plantuml diagrams on configuration change and also on 
          mvn clean com.github.jeluard:plantuml-maven-plugin:generate 
      -->
      <plugin>
        <groupId>com.github.jeluard</groupId>
        <artifactId>plantuml-maven-plugin</artifactId>
        <version>1.2</version>
        <configuration>
          <outputDirectory>${basedir}/doc/generated</outputDirectory>
          <sourceFiles>
            <directory>${basedir}/src/doc</directory>
            <includes>
              <include>**/*.puml</include>
            </includes>
          </sourceFiles>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>net.sourceforge.plantuml</groupId>
            <artifactId>plantuml</artifactId>
            <version>1.2021.12</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <?m2e execute onConfiguration?>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>COMPLEXITY</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.10</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.8.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.5.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>4.4</version>
    </dependency>
    <dependency>
      <groupId>net.sourceforge.plantuml</groupId>
      <artifactId>plantuml</artifactId>
      <version>1.2021.14</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.17.2</version>
    </dependency>
    <dependency>
      <!-- needed for static method mocking -->
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>4.0.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>